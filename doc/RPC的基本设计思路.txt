外部角色
注册中心 比如zookeeper集群，在具有强一致性的前提下，负责节点，服务的信息，消息，状态等数据存放

虚角色（逻辑意义上的角色）
Provider 服务的提供者 类似MVC的Model，服务的实现者
Customer 服务的消费者 类似MVC的Controller，调用Provider提供的服务

实角色
Node 每个节点都有自己的连接信息,状态
Invocation 执行任务的方法名，参数
Result 执行结果，包含了返回值，异常信息
Invoker 执行者 将invocation 处理成Result， 每种服务都对应有自己Customer端 和 Provider端 的2 个invoker
Cluster 相同服务接口的一组 invoker

动作
Router 从Cluster中按一定算法排除掉在网络上不能访问的Invoker
Registry 向注册中心注册注册节点的动作
LoadBalance 从一个Cluster中按负载算法获取一个invoker
Proxy 把一个接口或者接口的实现类生成代理的动作

HelloWorld 输出的过程描述 // 省略protocol 转换，底层的传输
定义接口 
public interface SayHello {
	public String sayHello(String name) throws Exception;
}
以及其实现类
public class SayHelloImpl implements SayHello {
	@Override
	public String sayHello(String name)  throws Exception {
		return "hello " + name;
	}
}

1.	注册中心启动
2.	启动 3个 Provider端， Node信息注册 provider-name 
3.	启动Customer端， Node信息注册 customer-name
------------------------- customer 端动作 ---------------------------
4.	在customer 端 调用 SayHello 接口的sayHello 方法
5.	通过proxy生成SayHello接口的代理类 SayHello$ProxyCustomer ，通过代理类执行 SayHello 方法
6.	SayHello$ProxyCustomer 解析 SayHello方法（方法名，参数，返回值类型，异常），生成一个Invocation实例
7.	从注册中心上获取一组注册名为provider-name的已注册的节点信息的集合 ---- Cluster 。
8.	通过router动作对这个Cluster过滤（比如对网段进行限制，部分IP禁止访问）
9.	通过loadbalance动作从Cluster中获取一个Invoker节点
10.	Invoker 【customer端】处理 Invocation (Result result = invoker.invoke(Invocation invocation)
	a)	invoke方法中，将invocation 序列化后发给provider
------------------------- provide端动作 -----------------------------
		1.	找到SayHello接口的实现类SayHelloImpl，通过proxy生成对应的代理类SayHelloImpl$ProxyProvider
		2.	通过代理类，接收invocation反序列化，生成一个Invoker
		3.	Invoker【provider端】处理invocation (Result result = invoker.invoke(Invocation invocation)
			a)	解析invocation，将解析结果交给代理类SayHelloImpl$Proxy执行
			b)	在代理类SayHelloImpl$ProxyProvider 中 SayHelloImpl实际执行sayHello方法，返回值或异常到代理类SayHelloImpl$ProxyProvider
			c)	代理类SayHelloImpl$ProxyProvider包装返回值和异常 ，生成Result
			d)	Invoker【provider端】将Result序列化后返回customer端
------------------------- customer 端动作 ---------------------------
	b)	在步骤10.a后，Invoker接收到provider传输的result并反序列化，处理异常和返回值
11.	返回值或异常到代理类SayHello$ProxyCustomer
12.	返回值或异常到sayHello

===================================================================
Protocol & Exporter

protocol 协议接口，包含了以下的概念
1.	用什么方式进行RPC调用，比如 RMI方式，muticast方式
2.	用什么端口监听 开启一个端口，监听请求，解析请求并找到对应的Exporter，从而找到Invoker，进行服务调用
3.	发布服务 将可以执行的Invoker按协议发布 ---  将 Invoker export 为 Exporter
4.	停止所有服务

Exporter 
对于一个服务，对应一个执行的Invoker，一个执行的Invoker，可以被多种协议发布
所以一个 Invoker 可以对应多个Exporter
通过protocol按请求的内容查到对应的Exporter
Exporter可以被销毁



